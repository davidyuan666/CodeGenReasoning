[
    {
        "distance": 1.0,
        "from_label": "import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as snsx = np.linspace(0, 2 * np.pi, 400)y1 = np.sin(x)y2 = np.cos(x)# plot x vs y1 and x vs y2 in two subplots, sharing the x axis# SOLUTION START",
        "to_label": "Import the required libraries. In this problem, numpy, pandas, matplotlib.pyplot, and seaborn are imported for data manipulation and visualization."
    },
    {
        "distance": 0.2105942313683416,
        "from_label": "Import the required libraries. In this problem, numpy, pandas, matplotlib.pyplot, and seaborn are imported for data manipulation and visualization.",
        "to_label": "Generate the x values using numpy's linspace function. The linspace function generates 400 evenly spaced values between 0 and 2π."
    },
    {
        "distance": 0.24535951997235775,
        "from_label": "Generate the x values using numpy's linspace function. The linspace function generates 400 evenly spaced values between 0 and 2π.",
        "to_label": "Calculate y1 values as the sine of x using numpy's sin function."
    },
    {
        "distance": 0.15549713202604412,
        "from_label": "Calculate y1 values as the sine of x using numpy's sin function.",
        "to_label": "Calculate y2 values as the cosine of x using numpy's cos function."
    },
    {
        "distance": 0.9358234124957605,
        "from_label": "Calculate y2 values as the cosine of x using numpy's cos function.",
        "to_label": "To plot x vs y1 and x vs y2 in two subplots that share the x-axis, use matplotlib's subplots function. This function allows creating multiple subplots in a single figure."
    },
    {
        "distance": 0.15670231416970257,
        "from_label": "To plot x vs y1 and x vs y2 in two subplots that share the x-axis, use matplotlib's subplots function. This function allows creating multiple subplots in a single figure.",
        "to_label": "Call plt.subplots with the parameters nrows=2 and ncols=1 to create a figure with 2 rows and 1 column of subplots. Set the sharex parameter to True to ensure the subplots share the x-axis."
    },
    {
        "distance": 0.38877122262271024,
        "from_label": "Call plt.subplots with the parameters nrows=2 and ncols=1 to create a figure with 2 rows and 1 column of subplots. Set the sharex parameter to True to ensure the subplots share the x-axis.",
        "to_label": "Unpack the returned objects from plt.subplots into the variables fig and axs. 'fig' refers to the overall figure and 'axs' is an array containing the individual subplot axes."
    },
    {
        "distance": 0.7904127456026012,
        "from_label": "Unpack the returned objects from plt.subplots into the variables fig and axs. 'fig' refers to the overall figure and 'axs' is an array containing the individual subplot axes.",
        "to_label": "Plot y1 versus x on the first subplot (axs[0]) using the ax.plot method."
    },
    {
        "distance": 0.15734303593467122,
        "from_label": "Plot y1 versus x on the first subplot (axs[0]) using the ax.plot method.",
        "to_label": "Plot y2 versus x on the second subplot (axs[1]) using the ax.plot method."
    },
    {
        "distance": 0.33685668450020456,
        "from_label": "Plot y2 versus x on the second subplot (axs[1]) using the ax.plot method.",
        "to_label": "Customize the plots by adding titles, labels, or other desired properties using methods such as ax.set_title or ax.set_xlabel."
    },
    {
        "distance": 0.1823464845992317,
        "from_label": "Customize the plots by adding titles, labels, or other desired properties using methods such as ax.set_title or ax.set_xlabel.",
        "to_label": "Use plt.tight_layout() to adjust the spacing between subplots for a cleaner appearance."
    },
    {
        "distance": 0.19784932759724758,
        "from_label": "Use plt.tight_layout() to adjust the spacing between subplots for a cleaner appearance.",
        "to_label": "Finally, display the plots using plt.show(). This will render the figure with the two subplots sharing the x-axis."
    },
    {
        "distance": 0.8417226716283329,
        "from_label": "Finally, display the plots using plt.show(). This will render the figure with the two subplots sharing the x-axis.",
        "to_label": "fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)plt.subplots_adjust(hspace=0.0)ax1.grid()ax2.grid()ax1.plot(x, y1, color=\"r\")ax2.plot(x, y2, color=\"b\", linestyle=\"--\")"
    }
]