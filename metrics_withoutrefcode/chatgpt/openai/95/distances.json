[
    {
        "distance": 1.0,
        "from_label": "Problem:How to batch convert sentence lengths to masks in PyTorch?For example, fromlens = [3, 5, 4]we want to getmask = [[1, 1, 1, 0, 0],        [1, 1, 1, 1, 1],        [1, 1, 1, 1, 0]]Both of which are torch.LongTensors.A:<code>import numpy as npimport pandas as pdimport torchlens = load_data()def get_mask(lens):    # return the solution in this function    # mask = get_mask(lens)    ### BEGIN SOLUTION",
        "to_label": "Identify the problem: We need to create a mask tensor in PyTorch from a list of sentence lengths. Each element in this list represents the length of a sentence, and we need to create a mask where positions up to the sentence length are marked with 1, and the rest are marked with 0."
    },
    {
        "distance": 0.32428217787416647,
        "from_label": "Identify the problem: We need to create a mask tensor in PyTorch from a list of sentence lengths. Each element in this list represents the length of a sentence, and we need to create a mask where positions up to the sentence length are marked with 1, and the rest are marked with 0.",
        "to_label": "Understand the input and output: The input is a list of integers representing sentence lengths, and the output should be a 2D tensor (a list of lists) where each sublist corresponds to a mask for a sentence. The length of each sublist should be equal to the length of the longest sentence."
    },
    {
        "distance": 0.37836379016214394,
        "from_label": "Understand the input and output: The input is a list of integers representing sentence lengths, and the output should be a 2D tensor (a list of lists) where each sublist corresponds to a mask for a sentence. The length of each sublist should be equal to the length of the longest sentence.",
        "to_label": "Determine the maximum sentence length: We need to determine the maximum length from the given list of sentence lengths as this will be the number of columns in the mask tensor."
    },
    {
        "distance": 0.4747522125659981,
        "from_label": "Determine the maximum sentence length: We need to determine the maximum length from the given list of sentence lengths as this will be the number of columns in the mask tensor.",
        "to_label": "Create an empty mask tensor: Initialize a 2D tensor filled with zeros, with dimensions equal to the number of sentences (rows) and the maximum sentence length (columns)."
    },
    {
        "distance": 0.3365164790538739,
        "from_label": "Create an empty mask tensor: Initialize a 2D tensor filled with zeros, with dimensions equal to the number of sentences (rows) and the maximum sentence length (columns).",
        "to_label": "Fill the mask tensor: Iterate over each sentence length and set the corresponding number of positions in the respective row of the mask tensor to 1, starting from the first position."
    },
    {
        "distance": 0.9465002004455503,
        "from_label": "Fill the mask tensor: Iterate over each sentence length and set the corresponding number of positions in the respective row of the mask tensor to 1, starting from the first position.",
        "to_label": "Implement the solution in the function: Write the code to perform steps 3 to 5 inside the 'get_mask' function, and ensure the resulting mask is a PyTorch LongTensor."
    },
    {
        "distance": 0.3835418222554145,
        "from_label": "Implement the solution in the function: Write the code to perform steps 3 to 5 inside the 'get_mask' function, and ensure the resulting mask is a PyTorch LongTensor.",
        "to_label": "Ensure the function returns the correct output: Finally, return the mask tensor from the function, and verify it matches the expected output format."
    },
    {
        "distance": 0.8933015753921125,
        "from_label": "Ensure the function returns the correct output: Finally, return the mask tensor from the function, and verify it matches the expected output format.",
        "to_label": "Example code implementation:\n\n```python\nimport torch\n\ndef get_mask(lens):\n    max_len = max(lens)  # Step 3\n    mask = torch.zeros((len(lens), max_len), dtype=torch.long)  # Step 4\n    for i, length in enumerate(lens):\n        mask[i, :length] = 1  # Step 5\n    return mask  # Step 7\n\n# Example usage\nlens = [3, 5, 4]\nmask = get_mask(lens)\nprint(mask)\n```\nThe code initializes a zero tensor and iterates over each sentence length to create the appropriate mask."
    },
    {
        "distance": 0.3756216559868429,
        "from_label": "Example code implementation:\n\n```python\nimport torch\n\ndef get_mask(lens):\n    max_len = max(lens)  # Step 3\n    mask = torch.zeros((len(lens), max_len), dtype=torch.long)  # Step 4\n    for i, length in enumerate(lens):\n        mask[i, :length] = 1  # Step 5\n    return mask  # Step 7\n\n# Example usage\nlens = [3, 5, 4]\nmask = get_mask(lens)\nprint(mask)\n```\nThe code initializes a zero tensor and iterates over each sentence length to create the appropriate mask.",
        "to_label": "# def get_mask(lens):    ### BEGIN SOLUTION    max_len = max(lens)    mask = torch.arange(max_len).expand(len(lens), max_len) < lens.unsqueeze(1)    mask = mask.type(torch.LongTensor)    ### END SOLUTION    # return mask# mask = get_mask(lens)    return mask"
    }
]