[
    {
        "distance": 1.0,
        "from_label": "Problem:Input example:I have a numpy array, e.g.a=np.array([[0,1], [2, 1], [4, 8]])Desired output:I would like to produce a mask array with the min value along a given axis, in my case axis 1, being True and all others being False. e.g. in this casemask = np.array([[True, False], [False, True], [True, False]])How can I achieve that?A:<code>import numpy as npa = np.array([[0, 1], [2, 1], [4, 8]])</code>mask = ... # put solution in this variableBEGIN SOLUTION<code>",
        "to_label": "Understand the problem: We need to create a boolean mask where only the minimum values along axis 1 (rows) are True, and all other values are False."
    },
    {
        "distance": 0.5071317107994043,
        "from_label": "Understand the problem: We need to create a boolean mask where only the minimum values along axis 1 (rows) are True, and all other values are False.",
        "to_label": "Find the minimum values along axis 1 using np.min() or np.amin() with axis=1. This will give us an array of minimum values for each row."
    },
    {
        "distance": 0.4004591962405609,
        "from_label": "Find the minimum values along axis 1 using np.min() or np.amin() with axis=1. This will give us an array of minimum values for each row.",
        "to_label": "Compare the original array with the array of minimum values to create the mask. Since we're comparing row-wise, we need to reshape the minimum values array to allow broadcasting."
    },
    {
        "distance": 0.8214189173695794,
        "from_label": "Compare the original array with the array of minimum values to create the mask. Since we're comparing row-wise, we need to reshape the minimum values array to allow broadcasting.",
        "to_label": "Reshape the minimum values array to have shape (3,1) so it can be broadcast against the original array which has shape (3,2)."
    },
    {
        "distance": 0.41714911229210444,
        "from_label": "Reshape the minimum values array to have shape (3,1) so it can be broadcast against the original array which has shape (3,2).",
        "to_label": "Perform the comparison between the original array and the reshaped minimum values array using the == operator. This will give us the desired boolean mask."
    },
    {
        "distance": 0.4518185024229193,
        "from_label": "Perform the comparison between the original array and the reshaped minimum values array using the == operator. This will give us the desired boolean mask.",
        "to_label": "Verify the output mask matches the desired output: np.array([[True, False], [False, True], [True, False]])."
    },
    {
        "distance": 0.6522684854800311,
        "from_label": "Verify the output mask matches the desired output: np.array([[True, False], [False, True], [True, False]]).",
        "to_label": "mask = (a.min(axis=1,keepdims=1) == a)"
    }
]