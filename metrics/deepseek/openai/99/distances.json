[
    {
        "distance": 0.38090824106826815,
        "from_label": "Problem:I have used sklearn for Cross-validation and want to do a more visual information with the values of each model.The problem is, I can't only get the name of the templates.Instead, the parameters always come altogether. How can I only retrieve the name of the models without its parameters?Or does it mean that I have to create an external list for the names?here I have a piece of code:for model in models:   scores = cross_val_score(model, X, y, cv=5)   print(f'Name model: {model} , Mean score: {scores.mean()}')But I also obtain the parameters:Name model: LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), Mean score: 0.8066782865537986In fact I want to get the information this way:Name Model: LinearRegression, Mean Score: 0.8066782865537986Any ideas to do that? Thanks!A:<code>import numpy as npimport pandas as pdfrom sklearn.linear_model import LinearRegressionmodel = LinearRegression()</code>model_name = ... # put solution in this variableBEGIN SOLUTION<code>",
        "to_label": "Understand the problem: We want to extract just the model's class name (e.g., 'LinearRegression') without its parameters from a scikit-learn model object."
    },
    {
        "distance": 0.49431191427199034,
        "from_label": "Understand the problem: We want to extract just the model's class name (e.g., 'LinearRegression') without its parameters from a scikit-learn model object.",
        "to_label": "Recognize that scikit-learn model objects have a '__class__' attribute that refers to their class."
    },
    {
        "distance": 0.45469227854960254,
        "from_label": "Recognize that scikit-learn model objects have a '__class__' attribute that refers to their class.",
        "to_label": "Access the '__name__' attribute of the model's class to get the class name as a string."
    },
    {
        "distance": 0.386354886596283,
        "from_label": "Access the '__name__' attribute of the model's class to get the class name as a string.",
        "to_label": "Implement the solution by getting the model's class name using model.__class__.__name__."
    },
    {
        "distance": 1.0,
        "from_label": "Implement the solution by getting the model's class name using model.__class__.__name__.",
        "to_label": "Apply this to the original code to print just the model name without parameters."
    },
    {
        "distance": 0.6391076335153352,
        "from_label": "Apply this to the original code to print just the model name without parameters.",
        "to_label": "model_name = type(model).__name__"
    }
]