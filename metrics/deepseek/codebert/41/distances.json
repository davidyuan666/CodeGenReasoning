[
    {
        "distance": 0.6236180169495433,
        "from_label": "Problem:I have set up a GridSearchCV and have a set of parameters, with I will find the best combination of parameters. My GridSearch consists of 12 candidate models total.However, I am also interested in seeing the accuracy score of all of the 12, not just the best score, as I can clearly see by using the .best_score_ method. I am curious about opening up the black box that GridSearch sometimes feels like.I see a scoring= argument to GridSearch, but I can't see any way to print out scores. Actually, I want the full results of GridSearchCV besides getting the score, in pandas dataframe.Any advice is appreciated. Thanks in advance.A:<code>import numpy as npimport pandas as pdfrom sklearn.model_selection import GridSearchCVGridSearch_fitted = load_data()assert type(GridSearch_fitted) == sklearn.model_selection._search.GridSearchCV</code>full_results = ... # put solution in this variableBEGIN SOLUTION<code>",
        "to_label": "Understand the structure of GridSearchCV results. After fitting a GridSearchCV object, it stores all the results in the cv_results_ attribute, which is a dictionary containing keys like 'params', 'mean_test_score', 'std_test_score', etc."
    },
    {
        "distance": 0.4375713934689555,
        "from_label": "Understand the structure of GridSearchCV results. After fitting a GridSearchCV object, it stores all the results in the cv_results_ attribute, which is a dictionary containing keys like 'params', 'mean_test_score', 'std_test_score', etc.",
        "to_label": "Access the cv_results_ attribute of the fitted GridSearchCV object. This will give you all the detailed results from the grid search, including the scores for each parameter combination."
    },
    {
        "distance": 0.44248913475394813,
        "from_label": "Access the cv_results_ attribute of the fitted GridSearchCV object. This will give you all the detailed results from the grid search, including the scores for each parameter combination.",
        "to_label": "Convert the cv_results_ dictionary into a pandas DataFrame for easier manipulation and visualization. The DataFrame will have each parameter combination and its corresponding scores and other metrics as rows."
    },
    {
        "distance": 0.4721368663814158,
        "from_label": "Convert the cv_results_ dictionary into a pandas DataFrame for easier manipulation and visualization. The DataFrame will have each parameter combination and its corresponding scores and other metrics as rows.",
        "to_label": "Assign the resulting DataFrame to the variable 'full_results'. This DataFrame will contain all the information about the 12 candidate models, including their accuracy scores and other relevant metrics."
    },
    {
        "distance": 0.4667261697707162,
        "from_label": "Assign the resulting DataFrame to the variable 'full_results'. This DataFrame will contain all the information about the 12 candidate models, including their accuracy scores and other relevant metrics.",
        "to_label": "Verify the solution by checking the type of 'full_results' to ensure it is a pandas DataFrame and inspecting its contents to confirm it contains the expected grid search results."
    },
    {
        "distance": 1.0,
        "from_label": "Verify the solution by checking the type of 'full_results' to ensure it is a pandas DataFrame and inspecting its contents to confirm it contains the expected grid search results.",
        "to_label": "full_results = pd.DataFrame(GridSearch_fitted.cv_results_)"
    }
]