[
    {
        "distance": 1.0,
        "from_label": "Problem:I have a trained PyTorch model and I want to get the confidence score of predictions in range (0-1). The code below is giving me a score but its range is undefined. I want the score in a defined range of (0-1) using softmax. Any idea how to get this?conf, classes = torch.max(output.reshape(1, 3), 1)My code:MyNet.load_state_dict(torch.load(\"my_model.pt\"))def predict_allCharacters(input):    output = MyNet(input)    conf, classes = torch.max(output.reshape(1, 3), 1)    class_names = '012'    return conf, class_names[classes.item()]Model definition:MyNet = torch.nn.Sequential(torch.nn.Linear(4, 15),                            torch.nn.Sigmoid(),                            torch.nn.Linear(15, 3),                            )A:runnable code<code>import numpy as npimport pandas as pdimport torchMyNet = torch.nn.Sequential(torch.nn.Linear(4, 15),                            torch.nn.Sigmoid(),                            torch.nn.Linear(15, 3),                            )MyNet.load_state_dict(torch.load(\"my_model.pt\"))input = load_data()assert type(input) == torch.Tensor</code>confidence_score = ... # put solution in this variableBEGIN SOLUTION<code>",
        "to_label": "Load the trained model weights into the model architecture."
    },
    {
        "distance": 0.6171165955427579,
        "from_label": "Load the trained model weights into the model architecture.",
        "to_label": "Pass the input tensor through the model to get the raw output (logits)."
    },
    {
        "distance": 0.3502374675691951,
        "from_label": "Pass the input tensor through the model to get the raw output (logits).",
        "to_label": "Reshape the output tensor to ensure it has the correct dimensions for softmax application (1x3 in this case)."
    },
    {
        "distance": 0.5873352435189415,
        "from_label": "Reshape the output tensor to ensure it has the correct dimensions for softmax application (1x3 in this case).",
        "to_label": "Apply the softmax function to the reshaped output to convert logits into probabilities that sum to 1 across the classes."
    },
    {
        "distance": 0.30159883975346413,
        "from_label": "Apply the softmax function to the reshaped output to convert logits into probabilities that sum to 1 across the classes.",
        "to_label": "Use torch.max to get the maximum probability (confidence score) and its corresponding class index from the softmax output."
    },
    {
        "distance": 0.3061815414351069,
        "from_label": "Use torch.max to get the maximum probability (confidence score) and its corresponding class index from the softmax output.",
        "to_label": "The confidence score obtained from the softmax output will be in the range (0-1), representing the model's confidence in the predicted class."
    },
    {
        "distance": 0.709826803864133,
        "from_label": "The confidence score obtained from the softmax output will be in the range (0-1), representing the model's confidence in the predicted class.",
        "to_label": "'''training part'''# X, Y = load_iris(return_X_y=True)# lossFunc = torch.nn.CrossEntropyLoss()# opt = torch.optim.Adam(MyNet.parameters(), lr=0.001)# for batch in range(0, 50):#     for i in range(len(X)):#         x = MyNet(torch.from_numpy(X[i]).float()).reshape(1, 3)#         y = torch.tensor(Y[i]).long().unsqueeze(0)#         loss = lossFunc(x, y)#         loss.backward()#         opt.step()#         opt.zero_grad()#         # print(x.grad)#         # print(loss)#     # print(loss)output = MyNet(input)probs = torch.nn.functional.softmax(output.reshape(1, 3), dim=1)confidence_score, classes = torch.max(probs, 1)"
    }
]