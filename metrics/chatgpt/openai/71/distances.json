[
    {
        "distance": 0.9280689162627853,
        "from_label": "Problem:Sample dataframe:df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})I'd like to add exponentials of each existing column to the dataframe and name them based on existing column names with a prefix, e.g. exp_A is an exponential of column A and so on.The resulting dataframe should look like so:result = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"exp_A \": [e^1, e^2, e^3], \"exp_B \": [e^4, e^5, e^6]})Notice that e is the natural constant.Obviously there are redundant methods like doing this in a loop, but there should exist much more pythonic ways of doing it and after searching for some time I didn't find anything. I understand that this is most probably a duplicate; if so, please point me to an existing answer.A:<code>import pandas as pddf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})</code>result = ... # put solution in this variableBEGIN SOLUTION<code>",
        "to_label": "Import the necessary library, pandas, which is used for data manipulation and analysis in Python."
    },
    {
        "distance": 0.32565554210127534,
        "from_label": "Import the necessary library, pandas, which is used for data manipulation and analysis in Python.",
        "to_label": "Create the initial DataFrame named 'df' with columns 'A' and 'B' using pandas.DataFrame(). The DataFrame contains two columns: 'A' with values [1, 2, 3] and 'B' with values [4, 5, 6]."
    },
    {
        "distance": 0.6193129533021828,
        "from_label": "Create the initial DataFrame named 'df' with columns 'A' and 'B' using pandas.DataFrame(). The DataFrame contains two columns: 'A' with values [1, 2, 3] and 'B' with values [4, 5, 6].",
        "to_label": "Define a function or a method to calculate the exponential of each element in a DataFrame column. In pandas, this can be efficiently done using numpy's exp function."
    },
    {
        "distance": 0.24254235822172857,
        "from_label": "Define a function or a method to calculate the exponential of each element in a DataFrame column. In pandas, this can be efficiently done using numpy's exp function.",
        "to_label": "Use the pandas.DataFrame.apply() method to apply the numpy.exp function to each column in the DataFrame. The apply method is used here to iterate over each column and apply the exponential transformation."
    },
    {
        "distance": 0.3131521448112169,
        "from_label": "Use the pandas.DataFrame.apply() method to apply the numpy.exp function to each column in the DataFrame. The apply method is used here to iterate over each column and apply the exponential transformation.",
        "to_label": "Rename the resulting columns from the apply method by prefixing the original column names with 'exp_'. This can be done using pandas.DataFrame.rename() method, where you pass a dictionary mapping the original column names to their new names."
    },
    {
        "distance": 1.0,
        "from_label": "Rename the resulting columns from the apply method by prefixing the original column names with 'exp_'. This can be done using pandas.DataFrame.rename() method, where you pass a dictionary mapping the original column names to their new names.",
        "to_label": "Concatenate the original DataFrame and the new DataFrame containing exponential values using pandas.concat(). This will combine the original columns with their exponential counterparts into a single DataFrame."
    },
    {
        "distance": 0.23944195169340157,
        "from_label": "Concatenate the original DataFrame and the new DataFrame containing exponential values using pandas.concat(). This will combine the original columns with their exponential counterparts into a single DataFrame.",
        "to_label": "Assign the resulting concatenated DataFrame to the variable 'result', which will hold the final DataFrame with the original and exponential columns."
    },
    {
        "distance": 0.6500308622305309,
        "from_label": "Assign the resulting concatenated DataFrame to the variable 'result', which will hold the final DataFrame with the original and exponential columns.",
        "to_label": "Here's the complete code to achieve the described transformation: \n\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nexp_df = df.apply(np.exp)\nexp_df = exp_df.rename(columns=lambda x: f'exp_{x}')\n\nresult = pd.concat([df, exp_df], axis=1)\n```\n"
    },
    {
        "distance": 0.4606454294731014,
        "from_label": "Here's the complete code to achieve the described transformation: \n\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nexp_df = df.apply(np.exp)\nexp_df = exp_df.rename(columns=lambda x: f'exp_{x}')\n\nresult = pd.concat([df, exp_df], axis=1)\n```\n",
        "to_label": "import mathdef g(df):    return df.join(df.apply(lambda x: math.e**x).add_prefix('exp_'))result = g(df.copy())"
    }
]