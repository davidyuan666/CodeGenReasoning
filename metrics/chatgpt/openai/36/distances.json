[
    {
        "distance": 0.6582267799817347,
        "from_label": "Problem:I am trying to find duplicates rows in a pandas dataframe.df=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])dfOut[15]:    col1  col20     1     21     3     42     1     23     1     44     1     2duplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')duplicate = df.loc[duplicate_bool == True]duplicateOut[16]:    col1  col20     1     22     1     2Is there a way to add a column referring to the index of the last duplicate (the one kept)duplicateOut[16]:    col1  col2  index_original0     1     2               42     1     2               4Note: df could be very very big in my case....A:<code>import pandas as pddf=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])</code>result = ... # put solution in this variableBEGIN SOLUTION<code>",
        "to_label": "Initialize the DataFrame using the provided data. We have a DataFrame `df` with two columns: 'col1' and 'col2'."
    },
    {
        "distance": 0.9174439591474338,
        "from_label": "Initialize the DataFrame using the provided data. We have a DataFrame `df` with two columns: 'col1' and 'col2'.",
        "to_label": "Use the `duplicated` method to find duplicate rows based on both 'col1' and 'col2'. We use `keep='last'` to mark all duplicates except for the last occurrence."
    },
    {
        "distance": 1.0,
        "from_label": "Use the `duplicated` method to find duplicate rows based on both 'col1' and 'col2'. We use `keep='last'` to mark all duplicates except for the last occurrence.",
        "to_label": "Filter the DataFrame to only include the rows that are marked as duplicates. This is done by using `df.loc[duplicate_bool == True]`, where `duplicate_bool` is the boolean Series obtained in the previous step."
    },
    {
        "distance": 0.820678979387779,
        "from_label": "Filter the DataFrame to only include the rows that are marked as duplicates. This is done by using `df.loc[duplicate_bool == True]`, where `duplicate_bool` is the boolean Series obtained in the previous step.",
        "to_label": "To add a column that refers to the index of the last duplicate occurrence, we first need to identify the last occurrence of each duplicate group. We can do this by using `drop_duplicates` on the original DataFrame with `keep='last'`."
    },
    {
        "distance": 0.44582229716157257,
        "from_label": "To add a column that refers to the index of the last duplicate occurrence, we first need to identify the last occurrence of each duplicate group. We can do this by using `drop_duplicates` on the original DataFrame with `keep='last'`.",
        "to_label": "Create a mapping from the duplicate rows to the index of their last occurrence. We achieve this by iterating over the duplicate rows and matching them with their last occurrence index."
    },
    {
        "distance": 0.33658518007970684,
        "from_label": "Create a mapping from the duplicate rows to the index of their last occurrence. We achieve this by iterating over the duplicate rows and matching them with their last occurrence index.",
        "to_label": "Add a new column to the `duplicate` DataFrame that contains the index of the last occurrence. Use the mapping created in the previous step to populate this column."
    },
    {
        "distance": 0.3286823352302979,
        "from_label": "Add a new column to the `duplicate` DataFrame that contains the index of the last occurrence. Use the mapping created in the previous step to populate this column.",
        "to_label": "Return the updated DataFrame `duplicate` which now includes the 'index_original' column referencing the index of the last duplicate. This will be the final result."
    },
    {
        "distance": 0.8393879134410678,
        "from_label": "Return the updated DataFrame `duplicate` which now includes the 'index_original' column referencing the index of the last duplicate. This will be the final result.",
        "to_label": "def g(df):    df['index_original'] = df.groupby(['col1', 'col2']).col1.transform('idxmax')    for i in range(len(df)):        i = len(df) - 1 - i        origin = df.loc[i, 'index_original']        if i <= origin:            continue        if origin == df.loc[origin, 'index_original']:            df.loc[origin, 'index_original'] = i        df.loc[i, 'index_original'] = df.loc[origin, 'index_original']    return df[df.duplicated(subset=['col1', 'col2'], keep='last')]result = g(df.copy())"
    }
]