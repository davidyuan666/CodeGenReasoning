[
    {
        "distance": 0.8882459012803603,
        "from_label": "import numpy as npimport matplotlib.pyplot as pltlines = [[(0, 1), (1, 1)], [(2, 3), (3, 3)], [(1, 2), (1, 3)]]c = np.array([(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)])# Plot line segments according to the positions specified in lines# Use the colors specified in c to color each line segment# SOLUTION START",
        "to_label": "Import necessary libraries. We need to import numpy as np and matplotlib.pyplot as plt. This is already done in the code snippet provided."
    },
    {
        "distance": 1.0,
        "from_label": "Import necessary libraries. We need to import numpy as np and matplotlib.pyplot as plt. This is already done in the code snippet provided.",
        "to_label": "Define the line segments. The variable 'lines' is a list of tuples, where each tuple contains two points. Each point is a tuple of x and y coordinates. For example, [(0, 1), (1, 1)] represents a line segment from (0, 1) to (1, 1)."
    },
    {
        "distance": 0.26952294743970046,
        "from_label": "Define the line segments. The variable 'lines' is a list of tuples, where each tuple contains two points. Each point is a tuple of x and y coordinates. For example, [(0, 1), (1, 1)] represents a line segment from (0, 1) to (1, 1).",
        "to_label": "Define the colors for each line segment. The variable 'c' is a numpy array where each row is a color in RGBA format. For example, (1, 0, 0, 1) represents red with full opacity."
    },
    {
        "distance": 0.8130289845551586,
        "from_label": "Define the colors for each line segment. The variable 'c' is a numpy array where each row is a color in RGBA format. For example, (1, 0, 0, 1) represents red with full opacity.",
        "to_label": "Initialize a matplotlib figure and axis. Use plt.subplots() to create a figure and axis for plotting."
    },
    {
        "distance": 0.3833846252322453,
        "from_label": "Initialize a matplotlib figure and axis. Use plt.subplots() to create a figure and axis for plotting.",
        "to_label": "Iterate over each line segment and its corresponding color. Use a for loop with the enumerate function to get both the index and the line segment."
    },
    {
        "distance": 0.25494351995499115,
        "from_label": "Iterate over each line segment and its corresponding color. Use a for loop with the enumerate function to get both the index and the line segment.",
        "to_label": "Plot each line segment. Inside the loop, use the plt.plot() function to draw each line segment. Pass the x-coordinates and y-coordinates separately as arguments to plt.plot(). Use the index to access the corresponding color from the 'c' array and pass it to the 'color' parameter of plt.plot()."
    },
    {
        "distance": 0.8360368122548053,
        "from_label": "Plot each line segment. Inside the loop, use the plt.plot() function to draw each line segment. Pass the x-coordinates and y-coordinates separately as arguments to plt.plot(). Use the index to access the corresponding color from the 'c' array and pass it to the 'color' parameter of plt.plot().",
        "to_label": "Display the plot. After plotting all the line segments, use plt.show() to display the plot."
    },
    {
        "distance": 0.6210175925317648,
        "from_label": "Display the plot. After plotting all the line segments, use plt.show() to display the plot.",
        "to_label": "Ensure the plot is correctly configured. Optionally, set labels, title, and grid if needed for better visualization, using plt.xlabel(), plt.ylabel(), plt.title(), and plt.grid()."
    },
    {
        "distance": 0.46343005519985314,
        "from_label": "Ensure the plot is correctly configured. Optionally, set labels, title, and grid if needed for better visualization, using plt.xlabel(), plt.ylabel(), plt.title(), and plt.grid().",
        "to_label": "for i in range(len(lines)):    plt.plot([lines[i][0][0], lines[i][1][0]], [lines[i][0][1], lines[i][1][1]], c=c[i])"
    }
]