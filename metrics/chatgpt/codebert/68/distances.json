[
    {
        "distance": 0.48627825725128954,
        "from_label": "Problem:I would like to delete selected rows in a numpy.array . n [397]: a = array([[ NaN,   2.,   3., NaN],   .....:        [  1.,   2.,   3., 9]])  #can be another arrayIn [398]: print a[[ NaN   2.   3.  NaN] [  1.   2.   3.   9.]]In this example my goal is to delete all the rows that contain NaN. I expect the last command to result in:array([[1. 2. 3. 9.]])How can I do that?A:<code>import numpy as npa = np.array([[np.nan, 2., 3., np.nan],\t\t[1., 2., 3., 9]])</code>a = ... # put solution in this variableBEGIN SOLUTION<code>",
        "to_label": "Import the numpy library as np. This allows you to use numpy functions and features to handle arrays and perform operations like identifying NaN values."
    },
    {
        "distance": 0.2899610980780406,
        "from_label": "Import the numpy library as np. This allows you to use numpy functions and features to handle arrays and perform operations like identifying NaN values.",
        "to_label": "Create a numpy array 'a' that contains the data you want to filter. In this case, 'a' is a 2D array with some NaN values."
    },
    {
        "distance": 0.23900564248254882,
        "from_label": "Create a numpy array 'a' that contains the data you want to filter. In this case, 'a' is a 2D array with some NaN values.",
        "to_label": "Use the np.isnan(a) function to create a boolean mask of the same shape as 'a', where each element is True if the corresponding element in 'a' is NaN and False otherwise."
    },
    {
        "distance": 0.24953904181822095,
        "from_label": "Use the np.isnan(a) function to create a boolean mask of the same shape as 'a', where each element is True if the corresponding element in 'a' is NaN and False otherwise.",
        "to_label": "Use np.any(np.isnan(a), axis=1) to check each row for the presence of NaN values. This will return a 1D boolean array 'z' where each element is True if there is at least one NaN in the corresponding row of 'a'."
    },
    {
        "distance": 0.5435038274182324,
        "from_label": "Use np.any(np.isnan(a), axis=1) to check each row for the presence of NaN values. This will return a 1D boolean array 'z' where each element is True if there is at least one NaN in the corresponding row of 'a'.",
        "to_label": "Use the boolean mask 'z' to filter the array 'a'. The expression a[~z, :] selects all rows in 'a' where the corresponding element in 'z' is False, meaning the row does not contain any NaN values."
    },
    {
        "distance": 0.2471909368745023,
        "from_label": "Use the boolean mask 'z' to filter the array 'a'. The expression a[~z, :] selects all rows in 'a' where the corresponding element in 'z' is False, meaning the row does not contain any NaN values.",
        "to_label": "Assign the filtered array back to 'a'. Now, 'a' contains only the rows that do not have any NaN values."
    },
    {
        "distance": 0.6670921665267704,
        "from_label": "Assign the filtered array back to 'a'. Now, 'a' contains only the rows that do not have any NaN values.",
        "to_label": "Print or return the filtered array 'a' to verify that it only contains rows without NaN values. In this example, the expected output is array([[1., 2., 3., 9.]]) because the first row, which contains NaN values, has been removed."
    },
    {
        "distance": 1.0,
        "from_label": "Print or return the filtered array 'a' to verify that it only contains rows without NaN values. In this example, the expected output is array([[1., 2., 3., 9.]]) because the first row, which contains NaN values, has been removed.",
        "to_label": "z = np.any(np.isnan(a), axis = 1)a = a[~z, :]"
    }
]