{
    "prompts": [
      {
        "type": "基础功能实现",
        "title": "用户身份验证系统",
        "prompt": "请编写一个用于处理用户身份验证的函数，包含登录、注册和密码重置功能。使用Node.js和Express框架实现，并包含适当的错误处理和安全措施。",
        "requirements": [
          "Node.js和Express框架",
          "错误处理",
          "安全措施"
        ]
      },
      {
        "type": "算法",
        "title": "大规模数据排序算法",
        "prompt": "请实现一个高效的排序算法，用于处理大规模数据集（超过100万条记录）。要求时间复杂度不超过O(nlogn)，并对算法的关键步骤添加详细注释。",
        "requirements": [
          "时间复杂度O(nlogn)",
          "大规模数据处理",
          "详细注释"
        ]
      },
      {
        "type": "设计模式",
        "title": "多支付方式系统",
        "prompt": "使用工厂模式设计一个支付系统，需要支持多种支付方式（信用卡、PayPal、银行转账等）。请提供具体的代码实现和类图结构。",
        "requirements": [
          "工厂设计模式",
          "多支付方式支持",
          "类图结构"
        ]
      },
      {
        "type": "前端组件",
        "title": "响应式数据表格",
        "prompt": "创建一个响应式的数据表格组件，支持排序、筛选、分页功能，使用React框架实现。需要考虑性能优化和用户体验。",
        "requirements": [
          "React框架",
          "响应式设计",
          "性能优化",
          "用户体验"
        ]
      },
      {
        "type": "API设计",
        "title": "商城库存管理API",
        "prompt": "设计一个RESTful API，用于管理在线商城的商品库存系统。包括API端点设计、数据模型、接口文档，并使用OpenAPI规范描述。",
        "requirements": [
          "RESTful设计",
          "OpenAPI规范",
          "接口文档"
        ]
      },
      {
        "type": "数据库操作",
        "title": "MongoDB访问层",
        "prompt": "编写一个数据库访问层，实现对MongoDB的CRUD操作。包含连接池管理、事务处理和错误重试机制。请使用TypeScript实现并提供完整的类型定义。",
        "requirements": [
          "MongoDB",
          "TypeScript",
          "连接池管理",
          "错误重试"
        ]
      },
      {
        "type": "测试用例",
        "title": "用户注册系统测试",
        "prompt": "为一个用户注册系统编写完整的单元测试和集成测试。使用Jest框架，需要覆盖各种边界情况和错误场景，测试覆盖率要求达到90%以上。",
        "requirements": [
          "Jest框架",
          "单元测试",
          "集成测试",
          "高测试覆盖率"
        ]
      },
      {
        "type": "性能优化",
        "title": "图片处理服务优化",
        "prompt": "优化一个现有的图片处理服务，包括图片压缩、缓存策略和CDN配置。需要考虑服务器资源使用效率和响应时间。请提供详细的优化方案和代码实现。",
        "requirements": [
          "图片压缩",
          "缓存策略",
          "CDN配置",
          "性能优化"
        ]
      },
      {
        "type": "安全实现",
        "title": "安全文件上传系统",
        "prompt": "实现一个安全的文件上传功能，包括文件类型验证、大小限制、病毒扫描和存储加密。使用Python实现，需要考虑各种安全威胁和防护措施。",
        "requirements": [
          "Python",
          "文件验证",
          "安全措施",
          "加密存储"
        ]
      },
      {
        "type": "系统架构",
        "title": "微服务消息通知系统",
        "prompt": "设计一个微服务架构的消息通知系统，支持多种通知渠道（邮件、短信、推送通知等）。包括服务拆分、通信方式、容错机制和扩展性考虑。请提供详细的架构图和关键组件的代码实现。",
        "requirements": [
          "微服务架构",
          "多渠道通知",
          "容错机制",
          "可扩展性"
        ]
      }
    ]
  }